{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","title","select","handleInput","event","setState","prevState","target","value","handleSelect","filterTodos","a","filter","todo","toLowerCase","includes","readyTodos","todos","props","completed","Error","this","selectUser","selectedUserId","selectTodos","className","htmlFor","id","type","onChange","placeholder","map","classNames","readOnly","checked","userId","onClick","React","Component","request","endPoint","fetch","then","response","ok","status","json","CurrentUser","user","userFromServer","prevProps","name","email","phone","App","clearUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc788a58.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ninterface Props {\n  todos: Todo[],\n  selectUser: (userid: number) => void,\n  selectedUserId: number,\n}\n\ninterface State {\n  title: string,\n  select: string,\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    title: '',\n    select: 'all',\n  };\n\n  handleInput = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState(prevState => ({\n      ...prevState,\n      title: event.target.value,\n    }));\n  };\n\n  handleSelect = (event: ChangeEvent<HTMLSelectElement>) => {\n    this.setState(prevState => ({\n      ...prevState,\n      select: event.target.value,\n    }));\n  };\n\n  filterTodos = (a: Todo[]) => {\n    return a.filter(todo => (\n      todo.title.toLowerCase().includes(this.state.title.toLowerCase())\n    ));\n  };\n\n  readyTodos = () => {\n    const { select } = this.state;\n    const { todos } = this.props;\n\n    switch (select) {\n      case 'all':\n        return this.filterTodos(todos);\n\n      case 'completed':\n        return this.filterTodos(todos.filter(todo => todo.completed));\n\n      case 'active':\n        return this.filterTodos(todos.filter(todo => !todo.completed));\n\n      default:\n        throw new Error('Error');\n    }\n  };\n\n  render() {\n    const { title, select } = this.state;\n    const { selectUser, selectedUserId } = this.props;\n\n    const selectTodos = this.readyTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <form>\n          <label htmlFor=\"search\">\n            Search by title\n            <input\n              id=\"search\"\n              type=\"text\"\n              value={title}\n              onChange={this.handleInput}\n              placeholder=\"Search\"\n            />\n          </label>\n\n          <label htmlFor=\"todoStatus\">\n            <select\n              id=\"todoStatus\"\n              value={select}\n              onChange={this.handleSelect}\n            >\n              <option value=\"all\">all</option>\n              <option value=\"completed\">completed</option>\n              <option value=\"active\">active</option>\n            </select>\n          </label>\n        </form>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {selectTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': todo.completed,\n                    'TodoList__item--checked': !todo.completed,\n                  },\n                )}\n              >\n                <label\n                  htmlFor=\"unchecked\"\n                >\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    id=\"unchecked\"\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    { 'TodoList__user-button--selected': selectedUserId === todo.userId },\n                  )}\n                  type=\"button\"\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (endPoint:string) => {\n  return fetch(`${BASE_URL}${endPoint}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`Server is not response ${response.status}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = (): Promise<Todo[]> => request('/todos');\n\nexport const getUser = (userId: number): Promise<User> => (\n  request(`/users/${userId}`)\n);\n","import React from 'react';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number,\n}\n\ninterface State {\n  user: User,\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state = {\n    user: {} as User,\n  };\n\n  componentDidMount() {\n    this.userFromServer();\n  }\n\n  componentDidUpdate(prevProps: { userId: number }) {\n    if (prevProps.userId !== this.props.userId) {\n      this.userFromServer();\n    }\n  }\n\n  userFromServer() {\n    getUser(this.props.userId)\n      .then(user => this.setState({ user }));\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return 'No users download';\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user.id}`}</span></h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[],\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  selectUser = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  clearUserId = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    if (!todos) {\n      return '';\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n\n          {selectedUserId && (\n            <button\n              type=\"button\"\n              onClick={this.clearUserId}\n            >\n              Clear\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}